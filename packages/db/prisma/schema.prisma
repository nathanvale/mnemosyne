generator client {
  provider = "prisma-client-js"
  output   = "../generated"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Message {
  id        Int      @id @default(autoincrement())
  timestamp DateTime
  sender    String
  senderId  String?
  message   String?
  hash      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  assets    Asset[]
  links     Link[]
  memories  Memory[] @relation("MemoryMessages")
}

model Link {
  id        Int     @id @default(autoincrement())
  url       String
  messageId Int
  message   Message @relation(fields: [messageId], references: [id])
}

model Asset {
  id        Int     @id @default(autoincrement())
  filename  String
  messageId Int
  type      String?
  message   Message @relation(fields: [messageId], references: [id])
}

// Phase 2: Memory and Emotional Intelligence Schema

model Memory {
  id                String             @id @default(cuid())
  sourceMessageIds  String             // JSON array of message IDs
  participants      String             // JSON participant data
  summary          String
  confidence       Int                // 1-10 scale
  contentHash      String             @unique // SHA-256 hash for deduplication
  deduplicationMetadata String?       // JSON metadata for merge history
  extractedAt      DateTime           @default(now())
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  
  // Relationships
  messages         Message[]          @relation("MemoryMessages")
  emotionalContext EmotionalContext?
  relationshipDynamics RelationshipDynamics?
  validationStatus ValidationStatus?
  qualityMetrics   QualityMetrics[]
  moodScores       MoodScore[]
  moodDeltas       MoodDelta[]
  analysisMetadata AnalysisMetadata?
  
  @@index([contentHash])
}

model EmotionalContext {
  id              String   @id @default(cuid())
  memoryId        String   @unique
  primaryMood     String   // positive, negative, neutral, mixed, ambiguous
  intensity       Int      // 1-10 scale
  themes          String   // JSON EmotionalTheme array
  emotionalMarkers String  // JSON EmotionalMarker array
  contextualEvents String  // JSON ContextualEvent array
  temporalPatterns String  // JSON TemporalPattern array
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  memory          Memory   @relation(fields: [memoryId], references: [id], onDelete: Cascade)
}

model RelationshipDynamics {
  id                   String   @id @default(cuid())
  memoryId             String   @unique
  overallDynamics      String   // JSON OverallRelationshipDynamics
  participantDynamics  String   // JSON ParticipantDynamics array
  communicationPatterns String  // JSON CommunicationPattern array
  interactionQuality   String   // JSON InteractionQuality
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  memory               Memory   @relation(fields: [memoryId], references: [id], onDelete: Cascade)
}

model ValidationStatus {
  id                   String   @id @default(cuid())
  memoryId             String   @unique
  status               String   // pending, approved, rejected, needs_refinement
  validator            String?
  validatedAt          DateTime?
  validationRound      Int      @default(1)
  requiresRefinement   Boolean  @default(false)
  refinementSuggestions String  // JSON RefinementSuggestion array
  approvalHistory      String   // JSON ApprovalHistory array
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  memory               Memory   @relation(fields: [memoryId], references: [id], onDelete: Cascade)
}

model QualityMetrics {
  id                    String   @id @default(cuid())
  memoryId              String
  overallQuality        Float    // 1-10 scale
  dimensionalQuality    String   // JSON DimensionalQuality object
  confidenceAlignment   Float
  validationConsistency Float
  evidenceSupport       Float
  calculatedAt          DateTime @default(now())
  calculationMethod     String
  
  memory                Memory   @relation(fields: [memoryId], references: [id], onDelete: Cascade)
  
  @@index([memoryId])
}

// Phase 3: Mood Scoring and Analysis Schema

model MoodScore {
  id              String        @id @default(cuid())
  memoryId        String
  score           Float         // 0-10 scale
  confidence      Float         // 0-1 scale
  descriptors     String        // JSON array of descriptors
  algorithmVersion String
  processingTimeMs Int
  calculatedAt    DateTime      @default(now())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  memory          Memory        @relation(fields: [memoryId], references: [id], onDelete: Cascade)
  factors         MoodFactor[]
  
  @@index([memoryId])
  @@index([calculatedAt])
}

model MoodFactor {
  id            String    @id @default(cuid())
  moodScoreId   String
  type          String    // sentiment_analysis, psychological_indicator, etc.
  weight        Float     // 0-1 scale
  description   String
  evidence      String    // JSON array of evidence strings
  internalScore Float?    // Internal factor score if available
  createdAt     DateTime  @default(now())
  
  moodScore     MoodScore @relation(fields: [moodScoreId], references: [id], onDelete: Cascade)
  
  @@index([moodScoreId])
}

model MoodDelta {
  id            String   @id @default(cuid())
  memoryId      String
  magnitude     Float
  direction     String   // positive, negative, neutral
  type          String   // mood_repair, celebration, decline, plateau
  confidence    Float    // 0-1 scale
  factors       String   // JSON array of factor strings
  significance  Float
  previousScore Float?
  currentScore  Float
  detectedAt    DateTime @default(now())
  createdAt     DateTime @default(now())
  
  memory        Memory   @relation(fields: [memoryId], references: [id], onDelete: Cascade)
  
  @@index([memoryId])
  @@index([detectedAt])
  @@index([significance])
}

model AnalysisMetadata {
  id                  String   @id @default(cuid())
  memoryId            String   @unique
  processingDuration  Int      // milliseconds
  confidence          Float    // 0-1 scale
  qualityMetrics      String   // JSON quality metrics object
  issues              String   // JSON array of issues
  createdAt           DateTime @default(now())
  
  memory              Memory   @relation(fields: [memoryId], references: [id], onDelete: Cascade)
}
